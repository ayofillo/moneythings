/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'info.solidsoft.pitest' version '1.7.4'
    id 'jacoco'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.0'
    implementation 'org.apache.camel.springboot:camel-spring-boot-starter:3.16.0'
    implementation 'mysql:mysql-connector-java:8.0.29'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.5'
    implementation 'org.springframework.boot:spring-boot-configuration-processor:2.7.0'
    implementation 'org.projectlombok:lombok:1.18.24'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.7.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.0'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

pitest {
    junit5PluginVersion = '0.12'
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['com.example.demo.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

group = 'com.example'
version = '0.0.1'
description = 'demo'
java.sourceCompatibility = JavaVersion.VERSION_11

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
